/*
 * 	startup.c
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}
__attribute__((naked))
void graphic_initalize(void)
{
	__asm volatile (" .HWORD   0xDFF0\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_clear_screen(void)
{
	__asm volatile (" .HWORD   0xDFF1\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
	__asm volatile (" .HWORD   0xDFF2\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
	__asm volatile (" .HWORD   0xDFF3\n");
	__asm volatile (" BX LR\n");
}

#define SIMULATOR
#define SysTick				0xE000E010
#define STK_CTRL			((volatile unsigned int *)		(SysTick))
#define STK_LOAD			((volatile unsigned int *)		(SysTick+0x04))
#define STK_VAL				((volatile unsigned int *)		(SysTick+0x08))

void delay_250ns(void){
	* STK_CTRL = 0;
	* STK_LOAD = (164/4) - 1;
	* STK_VAL = 0;
	* STK_CTRL = 5;
	while((* STK_CTRL & 0x10000) == 0);
	* STK_CTRL = 0;	
}
void delay_mikro(int us){
	#ifdef SIMULATOR
		us = us/100;
		us++;
	#endif
	while ( us > 0)
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
}
void delay_mili(int ms){
	#ifdef SIMULATOR
		ms = ms/100;
		ms++;
	#endif
		delay_mikro(ms*1000);		
}

typedef struct{
  char x,y;
} POINT, *PPOINT;
typedef struct{
	POINT p0;
	POINT p1;
}	LINE, *PLINE;

void swap( int *a, int *b){
	int tmp = *a;
	*a = *b;
	*b = tmp;
}

void draw_line(PLINE l){
	
	int steep = abs((l->p1.y) - (l->p0.y)) > abs((l->p1.x) - (l->p0.x));
	if (steep){
		swap(l->p0.x , l->p0.y);
		swap(l->p1.x , l->p1.y);
	}
	if(l->p0.x > l->p1.x){
		swap(l->p0.x , l->p1.x);
		swap(l->p0.y , l->p1.y);
	}
	int deltax = ((l->p1.x) - (l->p0.x));
	int deltay = abs((l->p1.y) - (l->p0.y));
	int error = 0;
	int ystep;
	int y = l->p0.y;
	if(l->p0.y < l->p1.y){
		ystep = 1;		
	}
	else{
		ystep = -1;
	}
	for ( int x = l->p0.x; x <= l->p1.x; x++ )
		if(steep){
			graphic_pixel_set(y,x);
		}
		else{
			graphic_pixel_set(x,y);
		}	
		error = error + deltay;
		if((2*error) >= deltax){
			y = y + ystep;
			error = error - deltax;
		}
}

LINE lines[]={
{40,40, 90,60}, // random linje
{40,10, 100,10},
{40,10, 100,20},
{40,10, 100,30},
{40,10, 100,40},
{40,10, 100,50},
{40,10, 100,60},
{40,10, 90,60},
{40,10, 80,60},
{40,10, 70,60},
{40,10, 60,60},
{40,10, 50,60},
{40,10, 40,60}
};

void main(void)
{
  graphic_initalize();
  graphic_clear_screen();
  
  while( 1 )
  {
    for( int i = 0; i< sizeof(lines)/sizeof( LINE ); i++)
    {
      draw_line( &lines[i] );
    //  delay_mili( 500 );
    }
    //graphic_clear_screen();
  }
} 


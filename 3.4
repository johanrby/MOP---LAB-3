/*
 * 	startup.c
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

__attribute__((naked))
void graphic_initalize(void)
{
	__asm volatile (" .HWORD   0xDFF0\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_clear_screen(void)
{
	__asm volatile (" .HWORD   0xDFF1\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
	__asm volatile (" .HWORD   0xDFF2\n");
	__asm volatile (" BX LR\n");
}
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
	__asm volatile (" .HWORD   0xDFF3\n");
	__asm volatile (" BX LR\n");
}

#define MAX_POINTS 25
#define SIMULATOR
#define SysTick				0xE000E010
#define STK_CTRL			((volatile unsigned int *)		(SysTick))
#define STK_LOAD			((volatile unsigned int *)		(SysTick+0x04))
#define STK_VAL				((volatile unsigned int *)		(SysTick+0x08))
#define GPIO_D				0x40020C00
#define GPIO_D_MODER		((volatile unsigned int *)		(GPIO_D))
#define GPIO_D_OTYPER		((volatile unsigned short *)	(GPIO_D+0x05))
#define GPIO_D_PUPDR		((volatile unsigned short *) 	(GPIO_D+0x0E))
#define GPIO_D_OSPEEDR		((volatile unsigned int *)		(GPIO_D+0x08))
#define GPIO_D_ODR			((volatile unsigned short *)	(GPIO_D+0x14))
#define GPIO_D_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_D+0x14))	
#define GPIO_D_ODR_HIGH 	((volatile unsigned char *)		(GPIO_D+0x15))
#define GPIO_D_IDR_LOW		((volatile unsigned char *)		(GPIO_D+0x10))	
#define GPIO_D_IDR_HIGH		((volatile unsigned char *)		(GPIO_D+0x11))

void delay_250ns(void){
	* STK_CTRL = 0;
	* STK_LOAD = (164/4) - 1;
	* STK_VAL = 0;
	* STK_CTRL = 5;
	while((* STK_CTRL & 0x10000) == 0);
	* STK_CTRL = 0;	
}
void delay_mikro(int us){
	/*  #ifdef SIMULATOR
		us = us/1;
		us++;
	#endif    */  
	while ( us > 0)
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
}
void delay_mili(int ms){
	
	#ifdef SIMULATOR
		ms = ms/10000;
		ms++;
	#endif
		delay_mikro(ms*1000);		
}

void app_init(void)
{	
	* GPIO_D_MODER = 0x55005555;		
	* GPIO_D_PUPDR = 0x00AA0000;	//INPUT is PULL DOWN
	* GPIO_D_OTYPER = 0x00000000; 	//OUTPUt is PUSH PULL
	* GPIO_D_OSPEEDR = 0x00000000;  // oklart om denna behövs och hur den ska initieras 
}

unsigned char keyb(void)
{
	char key[] = { 1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD}; // tangetbordets olika tangenter
	int row;
	int col;
	
	for(row = 0; row <= 4; row++)
	{
		kbdActivate(row); 
		if(col = kbdGetCol()){
			kbdActivate(0);
			return key[4*(row-1) + (col-1)];
		}
	}
	kbdActivate(0);
	return 0xFF;
}
void kbdActivate(unsigned int row)
{		
	switch(row){
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
		default: *GPIO_D_ODR_HIGH = 0;
	}	
}
int kbdGetCol(void)
{
	unsigned char c;
	c = *GPIO_D_IDR_HIGH;
	if(c & 8) return 4;
	if(c & 4) return 3;
	if(c & 2) return 2;
	if(c & 1) return 1;
	return 0; 
}


typedef struct{
  char x,y;
} POINT, *PPOINT;
typedef struct{
	POINT p0;
	POINT p1;
}	LINE, *PLINE;
typedef struct{
	POINT start;
	int x,y;	
}	RECT, *PRECT;
typedef struct
{
  int numpoints;
  int sizex;
  int sizey;
  POINT px[ MAX_POINTS ];
} GEOMETRY, *PGEOMETRY;


GEOMETRY ball_geometry =
{
 12, 	/* numpoints */
 4,4, 	/* sizex,sizey */
 {
 /* px[0,1,2 ...] */
 {0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1}, {3,2}
 }
}; 

typedef struct tObj{
	PGEOMETRY geo;
	int dirx,diry;
	int posx,posy;
	void (* draw ) (struct tObj *);
	void (* clear ) (struct tObj *);
	void (* move ) (struct tObj *);
	void (* set_speed ) (struct tObj *, int, int);
} OBJECT, *POBJECT; 

void draw_ballobject(POBJECT o ){
	char numpoints = o->geo->numpoints;
	for (int i = 0; i < numpoints; i++){
		graphic_pixel_set( o->posx+o->geo->px[i].x , o->posy+o->geo->px[i].y);
	}
}

void clear_ballobject(POBJECT o){
	int numpoints = o->geo->numpoints;
	for (int i = 0; i < numpoints ; i++){
		graphic_pixel_set( o->posx+o->geo->px[i].x , o->posy+o->geo->px[i].y);
	}
}


void move_ballobject(POBJECT o){
	clear_ballobject( o );
	short new_x = o->posx + o->dirx; 
	short new_y = o->posy + o->diry;
	if ( new_x < 1 ){
		o->dirx = o->dirx * -1;
	} 
	if ( (new_x + o->geo->sizex) > 128 ){
		o->dirx = o->dirx * -1; 
	}
	if( new_y < 1 ){
		o->diry = o->diry * -1; 
	}
	if( (new_y + o->geo->sizey) > 64){
		o->diry = o->diry * -1; 
	}
	draw_ballobject( o );	
}

void set_ballobject_speed(POBJECT o, int speedx , int speedy){
	o->dirx = speedx;
	o->diry = speedy;
}


static OBJECT ball =
{
	&ball_geometry, 	/* geometri för en boll */
	0,0, 				/* initiala riktningskoordinater */
	1,1, 				/* initial startposition */
	draw_ballobject,
	clear_ballobject,
	move_ballobject,
	set_ballobject_speed
};


int main(void)
{
	char c;  
	POBJECT p = &ball;
	//init_app();   
	graphic_initalize();
	graphic_clear_screen();
   
while( 1 )
{
    p‐>move_ballobject( p );
    delay_mili(20);
    c = keyb();
    switch( c )
    {
    case 6: p‐>set_ballobject_speed( p, 3, 0); break;   
    case 4: p‐>set_ballobject_speed( p, ‐3, 0); break;   
    case 5: p‐>set_ballobject_speed( p, 0, 0); break;   
    case 2: p‐>set_ballobject_speed( p, 0, ‐3); break;   
    case 8: p‐>set_ballobject_speed( p, 0, 3); break;   
    }
}
}
